#!/usr/bin/env node

/**
 * Test script to verify bot comment filtering works correctly
 */

const { Octokit } = require('@octokit/rest');
const path = require('path');

// Mock comment data for testing
const mockComments = [
    {
        id: 1001,
        user: { login: 'test-bot', type: 'User' }, // The bot itself
        body: 'Processing issue...',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    },
    {
        id: 1002,
        user: { login: 'human-user', type: 'User' },
        body: 'Please help with this issue',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    },
    {
        id: 1003,
        user: { login: 'github-actions[bot]', type: 'Bot' },
        body: 'Automated check passed',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    },
    {
        id: 1004,
        user: { login: 'test-bot', type: 'User' }, // The bot itself
        body: '🤖 **Claude Response**\n\nHello! I can help with that.',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    },
    {
        id: 1005,
        user: { login: 'test-bot', type: 'User' }, // The bot itself
        body: '❌ **Error Processing @claude Request**\n\nSomething went wrong.',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    },
    {
        id: 1006,
        user: { login: 'another-user', type: 'User' },
        body: '@claude can you help?',
        issue_url: 'https://api.github.com/repos/test/repo/issues/1'
    }
];

// Simulate the bot's filtering logic
class BotFilterTest {
    constructor() {
        this.botUsername = 'test-bot';
        this.processedComments = new Set();
    }

    async testFiltering() {
        console.log('Testing bot comment filtering...\n');

        for (const comment of mockComments) {
            console.log(`\nChecking comment ${comment.id} from @${comment.user.login}:`);
            console.log(`  Body preview: ${comment.body.substring(0, 50)}...`);

            // Skip if comment is from the bot itself
            if (comment.user.login === this.botUsername) {
                console.log(`  ✅ FILTERED: Own bot comment`);
                this.processedComments.add(comment.id);
                continue;
            }

            // Skip actual GitHub bot comments
            const isActualBot = comment.user.type === 'Bot' || 
                               comment.user.login.includes('[bot]') || 
                               comment.user.login.endsWith('-bot');

            if (isActualBot) {
                console.log(`  ✅ FILTERED: Bot comment (type: ${comment.user.type})`);
                this.processedComments.add(comment.id);
                continue;
            }

            // Check for AI signatures
            const aiSignatures = [
                '⚙️ GitHub Automation | Powered by System',
                '🤖 Generated with [Claude Code]',
                '🐝 **Swarm Response**',
                '*This response was generated',
                '---\n*Generated by ruv-swarm',
                'Generated by ruv-swarm',
                '🤖 **Claude Response**',
                '🤖 **Claude\'s Response',
                '🤖 **Follow-up Response**',
                '❌ **Error Processing',
                'Processing directive from @'
            ];

            const isAIAgentComment = aiSignatures.some(sig => comment.body.includes(sig));

            if (isAIAgentComment) {
                console.log(`  ✅ FILTERED: AI agent comment (signature detected)`);
                this.processedComments.add(comment.id);
                continue;
            }

            // Check if it's a Claude mention
            const isClaude = /\B@claude\b/i.test(comment.body);
            
            console.log(`  ❌ NOT FILTERED: Human comment${isClaude ? ' (with @claude mention)' : ''}`);
            console.log(`  -> Would process this comment`);
        }

        console.log('\n\nSummary:');
        console.log(`Total comments checked: ${mockComments.length}`);
        console.log(`Comments filtered: ${this.processedComments.size}`);
        console.log(`Comments to process: ${mockComments.length - this.processedComments.size}`);
        console.log('\nFiltered comment IDs:', Array.from(this.processedComments));
    }
}

// Run the test
const test = new BotFilterTest();
test.testFiltering().catch(console.error);