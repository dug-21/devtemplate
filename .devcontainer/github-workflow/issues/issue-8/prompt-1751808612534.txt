You are working on GitHub issue #8 with ENHANCED real-time monitoring.

CRITICAL: You MUST provide frequent progress updates that will be posted to GitHub.

Issue Details:
- Repository: dug-21/devtemplate
- Issue #8: [BUG] Work files left in random places in respository
- Description: **Describe the bug**
The github workflow integration is responding to issues created, which could be a bug, idea, implemention request, etc.  The system responds, and at times creates temporary files, like prompt-6-xxxxx.txt, and also result summaries related to an issue.  The problem is that there is no structured way for the human to know exactly what work products go with what issue.  

**To Reproduce**
Steps to reproduce the behavior:

1. Create issue to request ruv-swarm
2. After processing, look in .devcontainer/github-workflow directory, you will see .txt files, and potentially some reportsummary.md file

**Expected behavior**
Any temporary files created are removed by the swarm, and report summaries are stored in organized fashion tied to an issue, with easy way for human to navigate to the full reports.

**Actual behavior**
any report files are usually stored directly in the .devcontainer/github-workflow directory

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment (please complete the following information):**
 - OS: Linux
 - OS Version: Ubuntu 22.04
 - Node.js: 22.x

 - Project branch Main

**Additional context**
Add any other context about the problem here, including:

Example txt filenames left in the directory: 
/workspaces/devtemplate/.devcontainer/github-workflow/prompt-5-1751804667543.txt
/workspaces/devtemplate/.devcontainer/github-workflow/prompt-6-1751806481181.txt

there are others.

**Possible Solution**
Solution likely comes in the form of explicit instructions to claude/ruv-swarm on placement of full reports tied to the issue and including link in the issue comment, and/or, enhancement to the monitor to perform cleanup activities.

**Checklist**
- [ ] I have searched existing issues to ensure this hasn't been reported before
- [ ] I have included all relevant information above
- [ ] I have provided clear reproduction steps
- [ ] I have included the full error message (if applicable)
- Labels: bug, needs-triage

MANDATORY WORKFLOW WITH PROGRESS TRACKING:

1. INITIALIZATION (Post immediately):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 8,
     body: "ðŸ”„ **Phase 1/4: Initialization**\n\n- Setting up ruv-swarm coordination\n- Analyzing issue requirements\n- Planning approach\n\n**Progress:** 10%"
   })

2. SWARM SETUP (Single BatchTool message):
   - mcp__ruv-swarm__swarm_init({ topology: "hierarchical", maxAgents: 6, strategy: "parallel" })
   - mcp__ruv-swarm__agent_spawn({ type: "analyst", name: "Requirements Analyst" })
   - mcp__ruv-swarm__agent_spawn({ type: "architect", name: "Solution Architect" })
   - mcp__ruv-swarm__agent_spawn({ type: "coder", name: "Implementation Lead" })
   - mcp__ruv-swarm__agent_spawn({ type: "tester", name: "QA Engineer" })
   - mcp__ruv-swarm__agent_spawn({ type: "coordinator", name: "Progress Tracker" })
   - mcp__ruv-swarm__memory_usage({ action: "store", key: "issue/8/start", value: { phase: "analysis" } })

3. ANALYSIS PHASE (Post progress):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 8,
     body: "ðŸ”„ **Phase 2/4: Analysis**\n\n- âœ… Swarm initialized with 6 agents\n- ðŸ”„ Analyzing requirements...\n- ðŸ”„ Researching best practices...\n\n**Progress:** 25%"
   })

4. AFTER ANALYSIS (Post findings):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 8,
     body: "ðŸ“Š **Analysis Complete**\n\n[Your detailed analysis findings]\n\n**Key Points:**\n- [Point 1]\n- [Point 2]\n\n**Progress:** 40%"
   })

5. IMPLEMENTATION PHASE (Post updates during coding):
   - Post when starting implementation (50%)
   - Post when creating files (60%)
   - Post when adding features (70%)
   - Post when testing (80%)
   - Post when completing (90%)

6. COMPLETION (Post final summary):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 8,
     body: "âœ… **Implementation Complete**\n\n**Summary:**\n[What was done]\n\n**Files Created/Modified:**\n- [List files]\n\n**Tests:**\n- [Test results]\n\n**Progress:** 100%\n\n---\n*This issue will be automatically closed in 60 seconds unless labeled with `keep-open`*"
   })

SPECIFIC TASK: [BUG] Work files left in random places in respository

Remember to:
- Post progress updates frequently (every major step)
- Use BatchTool for parallel operations
- Store progress in ruv-swarm memory
- Include specific details in updates
- Test everything before marking complete