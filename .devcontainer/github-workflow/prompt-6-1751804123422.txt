You are working on GitHub issue #6 with ENHANCED real-time monitoring.

CRITICAL: You MUST provide frequent progress updates that will be posted to GitHub.

Issue Details:
- Repository: dug-21/devtemplate
- Issue #6: Research Autonomous AI customer Discovery
- Description: ### Research Topic

Autonomous AI Customer Discover

### Research Questions

I'm considering launching a startup busienss, and one of the first objectives is to get out and talk to customers and have them explain their problem in their own words without bias.. to make sure that people will purchase what you are building.  I've heard about people using AI for customer discovery.  I'd like to hear more about it to see how/if I could integrate this into my busienss.

### Success Criteria

Analsysis is completed regarding the use of AI in customer discovery

### Background Context

_No response_

### Research Methods

- [ ] Literature review / documentation study
- [ ] Competitive analysis
- [ ] Technical proof of concept
- [x] User feedback gathering
- [ ] Performance/security analysis
- [ ] Cost-benefit analysis

### Timeline

_No response_
- Labels: swarm-processed, swarm-in-progress

MANDATORY WORKFLOW WITH PROGRESS TRACKING:

1. INITIALIZATION (Post immediately):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 6,
     body: "ðŸ”„ **Phase 1/4: Initialization**\n\n- Setting up ruv-swarm coordination\n- Analyzing issue requirements\n- Planning approach\n\n**Progress:** 10%"
   })

2. SWARM SETUP (Single BatchTool message):
   - mcp__ruv-swarm__swarm_init({ topology: "hierarchical", maxAgents: 6, strategy: "parallel" })
   - mcp__ruv-swarm__agent_spawn({ type: "analyst", name: "Requirements Analyst" })
   - mcp__ruv-swarm__agent_spawn({ type: "architect", name: "Solution Architect" })
   - mcp__ruv-swarm__agent_spawn({ type: "coder", name: "Implementation Lead" })
   - mcp__ruv-swarm__agent_spawn({ type: "tester", name: "QA Engineer" })
   - mcp__ruv-swarm__agent_spawn({ type: "coordinator", name: "Progress Tracker" })
   - mcp__ruv-swarm__memory_usage({ action: "store", key: "issue/6/start", value: { phase: "analysis" } })

3. ANALYSIS PHASE (Post progress):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 6,
     body: "ðŸ”„ **Phase 2/4: Analysis**\n\n- âœ… Swarm initialized with 6 agents\n- ðŸ”„ Analyzing requirements...\n- ðŸ”„ Researching best practices...\n\n**Progress:** 25%"
   })

4. AFTER ANALYSIS (Post findings):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 6,
     body: "ðŸ“Š **Analysis Complete**\n\n[Your detailed analysis findings]\n\n**Key Points:**\n- [Point 1]\n- [Point 2]\n\n**Progress:** 40%"
   })

5. IMPLEMENTATION PHASE (Post updates during coding):
   - Post when starting implementation (50%)
   - Post when creating files (60%)
   - Post when adding features (70%)
   - Post when testing (80%)
   - Post when completing (90%)

6. COMPLETION (Post final summary):
   mcp__github__add_issue_comment({
     owner: "dug-21",
     repo: "devtemplate",
     issue_number: 6,
     body: "âœ… **Implementation Complete**\n\n**Summary:**\n[What was done]\n\n**Files Created/Modified:**\n- [List files]\n\n**Tests:**\n- [Test results]\n\n**Progress:** 100%\n\n---\n*This issue will be automatically closed in 60 seconds unless labeled with `keep-open`*"
   })

SPECIFIC TASK: Research Autonomous AI customer Discovery

Remember to:
- Post progress updates frequently (every major step)
- Use BatchTool for parallel operations
- Store progress in ruv-swarm memory
- Include specific details in updates
- Test everything before marking complete